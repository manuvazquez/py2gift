[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "In order to avoid tqdm’s experimental warning"
  },
  {
    "objectID": "core.html#command-line-arguments",
    "href": "core.html#command-line-arguments",
    "title": "core",
    "section": "Command-line arguments",
    "text": "Command-line arguments\nThe function below just parses command-line arguments and pass them to the build function below.\n\nsource\n\nmain\n\n main ()\n\nParses command-line arguments to be passed to build"
  },
  {
    "objectID": "core.html#auxiliary-functions",
    "href": "core.html#auxiliary-functions",
    "title": "core",
    "section": "Auxiliary functions",
    "text": "Auxiliary functions\nA function to obtain the __init__ parameters for a class from the corresponding settings.\n\nsource\n\ninit_parameters_from_settings\n\n init_parameters_from_settings (cls_settings:dict)\n\nReturns a dictionary with the initialization parameters for a question\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncls_settings\ndict\nSettings for the class, which should include statement, feedback and, optionally, time\n\n\nReturns\ndict\nExact parameters that must be passed when instantiating the class.\n\n\n\nThe name for a testing file\n\ninput_file = '_input.yaml'\n\n\noutput file: quiz.yaml\npictures base directory: tc/midterm3\n\ncategories:\n\n  - name: Test category\n\n    classes:\n\n      - name: TestClass\n\n        question base name: Test class\n            \n        init parameters:\n            \n            distribution: Gaussian\n\n        statement: |\n          Consider a random variable, $X$, with mean $ \\mu = !mean $ and variance...\n          \n\n        feedback: |\n          Clearly, $Y$ is...\n          \n\n        time: 15\n        \n        number of instances: 2\n\nOverwriting _input.yaml\n\n\nThe initialization parameters for the first class in the first category can be obtained as\n\ninput_data = py2gift.util.yaml_to_dict(input_file)    \ninit_parameters_from_settings(input_data['categories'][0]['classes'][0])\n\n{'statement': un-filled template:\n Consider a random variable, $$X$$, with mean $$ \\mu = $mean $$ and variance...,\n 'feedback': Clearly, $Y$ is...,\n 'time': 15,\n 'distribution': 'Gaussian'}\n\n\nIf init_parameters is absent,\n\nno_init_input_file = '_input2.yaml'\n\n\noutput file: quiz.yaml\npictures base directory: tc/midterm3\n\ncategories:\n\n  - name: Test category\n\n    classes:\n\n      - name: TestClass\n\n        question base name: Test class\n\n        statement: |\n          Consider a random variable, $X$, with mean $ \\mu = !mean $ and variance...\n          \n\n        feedback: |\n          Clearly, $Y$ is...\n          \n\n        time: 15\n        \n        number of instances: 2\n\nOverwriting _input2.yaml\n\n\n, then only basic parameters will be passed when instatiating the class\n\ninput_data = py2gift.util.yaml_to_dict(no_init_input_file)    \ninit_parameters_from_settings(input_data['categories'][0]['classes'][0])\n\n{'statement': un-filled template:\n Consider a random variable, $$X$$, with mean $$ \\mu = $mean $$ and variance...,\n 'feedback': Clearly, $Y$ is...,\n 'time': 15}"
  },
  {
    "objectID": "core.html#processing-of-a-bunch-of-questions",
    "href": "core.html#processing-of-a-bunch-of-questions",
    "title": "core",
    "section": "Processing of a bunch of questions",
    "text": "Processing of a bunch of questions\n\nBuilding a GIFT file from generators’ settings\nThe workhorse of the library.\n\nsource\n\n\nbuild\n\n build (settings:str|dict, local_run:bool, questions_module:module,\n        parameters_file:str|dict='parameters.yaml', no_checks:bool=False,\n        embed_images:bool=False)\n\nGenerates a GIFT file\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsettings\nstr | dict\n\nSettings for all the questions (generators)\n\n\nlocal_run\nbool\n\nIf True, pictures will not be copied to a remote host\n\n\nquestions_module\nmodule\n\nA module or structure to hold the classes referenced in the settings\n\n\nparameters_file\nstr | dict\nparameters.yaml\nParameters to be passed to “gift-wrapper”\n\n\nno_checks\nbool\nFalse\nIf True LaTeX formulas are not be checked\n\n\nembed_images\nbool\nFalse\nIf True, images will be embedded in the questions (rather than linked)\n\n\nReturns\nNone\n\n\n\n\n\nThis function expects, among other things, an input file (defined above), a module implementing the classes referenced in the latter, and a parameters file.\n\nModule with questions\nThis can be used in the same way as a module would.\n\nclass FakeModule:\n    \n    class TestClass(py2gift.question.NumericalQuestionGenerator):\n        \"Dumb testing class\"\n    \n        def __init__(\n            self, \n            statement: py2gift.question.TemplatedLatexText, # Statement of the question\n            feedback: py2gift.question.TemplatedLatexText, # Feedback of the question\n            distribution: str, # ?\n            time: int | None = None, # Expectated time required to carry out the question\n            prng: np.random.RandomState = np.random.RandomState(42) # Pseudo-random numbers generator\n        ) -> None:\n\n            super().__init__(statement, feedback, time, prng)\n            \n            self.distribution = distribution\n        \n        def setup(self):\n            \n            mean = np.random.rand()\n\n            self.statement.fill(mean=mean)\n\n            self.solution = 42\n            self.error = '10%'\n\n\n\nParameters file\n\nparameters_file = '_parameters.yaml'\n\n\nimages hosting:\n\n  ssh:\n    user: mvazquez\n\n    # below, one should specify either a password for the user or  \"public key\" file but NOT both of them\n\n    password:\n\n    # \"~\" stands for the user's home directory (in Linux for one...)\n    public_key: ~/.ssh/id_rsa_mymachine.pub\n\n  copy:\n    # machine into which files will be copied\n    host: hidra1\n\n    # the path that in the remote machine acts as root of the publicly visible directories hierarchy (hence it's not\n    # visible from outside);  it *should* exist (\".\" stands for the working directory when you ssh into the machine)\n    public filesystem root: ./public_html\n\n  # public address from which the images will hang\n  public URL: http://www.tsc.uc3m.es/~mvazquez/\n\nlatex:\n\n  # auxiliary TeX file that will be created to check that formulas can be compiled\n  auxiliary file: __latex_check.tex\n\nOverwriting _parameters.yaml\n\n\n\nbuild(input_file, local_run=True, questions_module=FakeModule, parameters_file=parameters_file, no_checks=True)\n\n\n\n\n\n\n\nfile \"quiz.gift.txt\" created\n\n\nThe file actually created underneath by build (the name, quiz.yaml, was set above in the input_file)\n\n\n\npictures base directory: tc/midterm3\ncategories:\n  - name: Test category\n    questions:\n      - class: Numerical\n        statement: \"Consider a random variable, $X$, with mean $ \\\\mu = 0.863 $ and\\\n          \\ variance...\\n\"\n        feedback: \"Clearly, $Y$ is...\\n\"\n        time: '15'\n        solution:\n          value: 42\n          error: 10%\n        name: Test class I\n      - class: Numerical\n        statement: \"Consider a random variable, $X$, with mean $ \\\\mu = 0.91 $ and\\\n          \\ variance...\\n\"\n        feedback: \"Clearly, $Y$ is...\\n\"\n        time: '15'\n        solution:\n          value: 42\n          error: 10%\n        name: Test class II\n\n\nis ultimately processed by gift_wrapper to yield\n\n\n\n$CATEGORY: $course$/Test category\n\n::Test class I::[html]Consider a random variable, \\\\(X\\\\), with mean \\\\( \\\\mu \\= 0.863 \\\\) and variance...<br><br><br><i>Estimated time\\: 15 minutes</i><br>{\n#   =%100%42:4.2#\n    ####Clearly, \\\\(Y\\\\) is...\n}\n\n::Test class II::[html]Consider a random variable, \\\\(X\\\\), with mean \\\\( \\\\mu \\= 0.91 \\\\) and variance...<br><br><br><i>Estimated time\\: 15 minutes</i><br>{\n#   =%100%42:4.2#\n    ####Clearly, \\\\(Y\\\\) is...\n}\n\n\n\nThis is the file that is actually imported from Moodle, and quiz.yaml is mostly a side effect.\n\n!rm quiz.yaml quiz.gift.txt\n\nOne can also pass directly the dict with the settings.\n\nsettings = py2gift.util.yaml_to_dict(input_file)\n\nbuild(settings, local_run=True, questions_module=FakeModule, parameters_file=parameters_file, no_checks=True)\n\n\n\n\n\n\n\nfile \"quiz.gift.txt\" created\n\n\n\n\n\npictures base directory: tc/midterm3\ncategories:\n  - name: Test category\n    questions:\n      - class: Numerical\n        statement: \"Consider a random variable, $X$, with mean $ \\\\mu = 0.115 $ and\\\n          \\ variance...\\n\"\n        feedback: \"Clearly, $Y$ is...\\n\"\n        time: '15'\n        solution:\n          value: 42\n          error: 10%\n        name: Test class I\n      - class: Numerical\n        statement: \"Consider a random variable, $X$, with mean $ \\\\mu = 0.793 $ and\\\n          \\ variance...\\n\"\n        feedback: \"Clearly, $Y$ is...\\n\"\n        time: '15'\n        solution:\n          value: 42\n          error: 10%\n        name: Test class II"
  },
  {
    "objectID": "core.html#processing-a-single-question",
    "href": "core.html#processing-a-single-question",
    "title": "core",
    "section": "Processing a single question",
    "text": "Processing a single question\nThis is mostly intended for previewing a question in a jupyter notebook.\n\nBuilding a single question\nThis function returns settings that allow building a question using gift-wrapper.\n\nsource\n\n\nbuild_question\n\n build_question (question_generator:py2gift.question.QuestionGenerator,\n                 category_name:str, settings:dict, n_question:int=0)\n\nReturns the settings for building a question using “gift-wrapper”\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nquestion_generator\nQuestionGenerator\n\nThe question generator that will generate the appropirate settings\n\n\ncategory_name\nstr\n\nThe name of category the class belongs to\n\n\nsettings\ndict\n\nUser settings\n\n\nn_question\nint\n0\nThe number of instances to be returned\n\n\nReturns\ndict\n\nSettings that allow building the question using “gift-wrapper”\n\n\n\nFor testing, we need some settings. It is more natural to read and write them in a file.\n\nsettings_file = '_settings.yaml'\n\n\noutput file: quiz.yaml\npictures base directory: pics\n\ncategories:\n\n  - name: Category 1\n\n    classes:\n\n      - name: A\n\n        question base name: A numerical question\n\n        statement: What is...\n\n        feedback: Well...\n\n        parameters:\n\n          - a: 5\n            b: 3\n\n      - name: A\n\n        question base name: Another numerical question\n\n        statement: What is...\n\n        feedback: Well...\n        \n        number of instances: 2\n\n  # -----------------------------\n\n  - name: Category 2\n\n    classes:\n\n      - name: B\n\n        question base name: A multiple-choice question\n\n        init parameters:\n\n          nodes: ['S1', 'S2']\n\n        statement: |\n          Consider...\n\n        feedback: |\n          We must...\n\n        parameters: &dijkstra_parameters\n\n          - n: 0\n\n          - n: 1\n            \n  - name: Category 3\n\n    classes:\n\n      - name: C\n\n        question base name: Another numerical question\n\n        statement: What is...\n\n        feedback: Well...\n        \n        number of instances: 2\n\nOverwriting _settings.yaml\n\n\nNext, we need to define the classes referenced above (A, B and C)\n\nclass A(py2gift.question.NumericalQuestionGenerator):\n    \n    def setup(self, a: int, b:int):\n        \n        self.solution = 42\n        self.error =  '10%'\n\nclass B(py2gift.question.MultipleChoiceQuestionGenerator):\n    \n    def __init__(\n        self, statement: py2gift.question.TemplatedLatexText, feedback: py2gift.question.TemplatedLatexText,\n        nodes: list,\n        time: int | None = None, prng: np.random.RandomState = np.random.RandomState(42)) -> None:\n        \n        super().__init__(statement, feedback, time, prng)\n        \n        self.nodes = nodes\n    \n    \n    def setup(self, n:int):\n        \n        self.wrong_answers = [\n            ['yes', 50],\n            ['no', -50],\n            ['nope', -50],\n            ['yessss!!!', 50]\n        ]\n\nclass C(py2gift.question.NumericalQuestionGenerator):\n    \n    def setup(self):\n        \n        self.solution = 52\n        self.error =  '10%'\n\n\nbuild_question(A, category_name='Category 1', settings=py2gift.util.yaml_to_dict(settings_file))\n\n{'class': 'Numerical',\n 'statement': 'What is...',\n 'feedback': 'Well...',\n 'solution': {'value': 42, 'error': '10%'}}\n\n\n\nbuild_question(C, category_name='Category 3', settings=py2gift.util.yaml_to_dict(settings_file))\n\n{'class': 'Numerical',\n 'statement': 'What is...',\n 'feedback': 'Well...',\n 'solution': {'value': 52, 'error': '10%'}}"
  },
  {
    "objectID": "core.html#previewing",
    "href": "core.html#previewing",
    "title": "core",
    "section": "Previewing",
    "text": "Previewing\nThe settings of a question (in the form of a dictionary),\n\nquestion_settings = {\n    'class': 'Numerical',\n    'statement': 'What is the value of $\\\\pi$?',\n    'solution': {'value': 3.14, 'error': '50%'},\n    'feedback': 'well, $\\\\pi$'\n}\n\n, can be turned into a markdown string by py2gift.markdown.settings_to_markdown\n\npy2gift.util.render_latex(py2gift.markdown.settings_to_markdown(question_settings))\n\nStatement\nWhat is the value of \\(\\Large \\pi\\)?\nFeedback\nwell, \\(\\Large \\pi\\)\nSolution\n3.14 (error: .57)\n\n\n\nsource\n\ngenerator_to_markdown\n\n generator_to_markdown (settings:str|pathlib.Path|dict, category:str, cls:\n                        <module'py2gift.question'from'/home/runner/work/py\n                        2gift/py2gift/py2gift/question.py'>)\n\nReturns markdown text from a generator\n\n\n\n\nType\nDetails\n\n\n\n\nsettings\nstr | pathlib.Path | dict\nSettings\n\n\ncategory\nstr\nCategory of the question\n\n\ncls\npy2gift.question\nClass implementing the generator\n\n\nReturns\nstr\nMarkdown text\n\n\n\n\npy2gift.util.render_latex(generator_to_markdown(settings_file, category='Category 1', cls=A))\n\nStatement\nWhat is…\nFeedback\nWell…\nSolution\n42 (error: .2)"
  },
  {
    "objectID": "core.html#preprocessing-tex-files",
    "href": "core.html#preprocessing-tex-files",
    "title": "core",
    "section": "Preprocessing tex files",
    "text": "Preprocessing tex files\nFunction to turn a \\(\\TeX\\) file into an svg. It returns a markdown string that allows to visualize it in a cell.\n\nsource\n\nlatex_to_markdown\n\n latex_to_markdown (input_file:str|pathlib.Path,\n                    delete_input_file_afterwards:bool=False)\n\nReturns markdown text that shows the result of compiling a TeX file\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput_file\nstr | pathlib.Path\n\nTeX file\n\n\ndelete_input_file_afterwards\nbool\nFalse\nIf True the TeX file is deleted after conversion to svg\n\n\nReturns\nstr\n\nMarkdown text\n\n\n\nA sample \\(\\TeX\\) file,\n\ntex_file = '_sample.tex'\n\n, is written\n\n\\documentclass[]{standalone}\n\n\\usepackage[utf8]{inputenc}\n\n\\usepackage{tikz}\n\n\n\\begin{document}\n\n\\begin{tikzpicture}\n    \\node[draw, text width=60, align=center,font=\\small,minimum height=80] {The Ingenious Gentleman Don Quixote of La Mancha};\n\\end{tikzpicture}\n\n\\end{document}\n\nOverwriting _sample.tex\n\n\nHowever, you can only run the cell below if you have a \\(\\LaTeX\\) installation with TikZ\n\n#py2gift.util.render_latex(latex_to_markdown(tex_file, delete_input_file_afterwards=True))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "py2gift",
    "section": "",
    "text": "py2gift is a library meant to write question banks in GIFT format (Moodle) programmatically in Python. Ultimately, questions can be written (though this is not a requirement) from a Jupyter notebook. The advantages are:\nThis library relies on gift-wrapper and it has been created using nbdev. The latter fact means you can explore the actual source code through jupyter notebooks and see the inner workings of each individual piece."
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "py2gift",
    "section": "Setup",
    "text": "Setup\nSince the library is in PyPI\npip install py2gift\nshould do.\n\nManual\nIf you’d rather clone this repository, the command below should install all the required packages\npip install pandas numpy matplotlib ruamel.yaml gift-wrapper"
  },
  {
    "objectID": "index.html#how-to-use-it",
    "href": "index.html#how-to-use-it",
    "title": "py2gift",
    "section": "How to use it",
    "text": "How to use it\nWriting a question involves specifying the statement and, optionally, the feedback in different notebook cells. In any case, variables, specified with the prefix !, can be included, and those are meant to be filled in from within a Python class. This comes very handy when you want to create different versions of a single question in which some input data (maybe in the form of a picture) randomly changes from question to question. Then, you can instruct py2gift to call your Python code a number of times, each one giving rise to a different version of the same question (as long as some variable is set at random, e.g., by exploiting the functionality in np.random). The solution, whose format depends on the question type, must also be set from within the code.\nUnderneath, images are handled by gift-wrapper, and hence paths (e.g., images/scheme.svg) to either .tex (that can be compiled with pdflatex) or .svg files can be included in the statement, solution or feedback of a question. Moreover, they can be included through one of the variables (prefix !), and hence random (but nonetheless meaningful) pictures are a possibility.\nNotice that the difference between two instances of the same question can be minor or significant. Ultimately, it depends on how sophisticated your Python code is (if the latter can solve the question/problem in a very general form, and you are also able to present it in the statement, then it is fine).\nBesides the above mentioned core functionality, py2gift provides some extra functions to ease the process of writing questions (modules tex, util, time, hash). However, a thorough description of the functionality would be very dry and you are probably better off by taking a look at one of the sample notebooks (minimal or example_1). Also, you can take a look at the documentation."
  },
  {
    "objectID": "notebook.html",
    "href": "notebook.html",
    "title": "Notebook",
    "section": "",
    "text": "A class to act as a container. This will be useful to simulate a Python module.\n\nsource\n\n\n\n ClassesContainer ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nclasses_container = ClassesContainer()\n\n\nclass DummyClass:\n    \n    n = 3\n\n\nclasses_container.add(DummyClass)\n\n\nclasses_container.DummyClass\n\n__main__.DummyClass\n\n\n\nclasses_container.DummyClass.n\n\n3"
  },
  {
    "objectID": "notebook.html#magics",
    "href": "notebook.html#magics",
    "title": "Notebook",
    "section": "Magics",
    "text": "Magics\n\nsource\n\nMyMagics\n\n MyMagics (shell=None, **kwargs)\n\nBase class for implementing magic functions.\nShell functions which can be reached as %function_name. All magic functions should accept a string, which they can parse for their own needs. This can make some functions easier to type, eg %cd ../ vs. %cd(\"../\")\nClasses providing magic functions need to subclass this class, and they MUST:\n\nUse the method decorators @line_magic and @cell_magic to decorate individual methods as magic functions, AND\nUse the class decorator @magics_class to ensure that the magic methods are properly registered at the instance level upon instance initialization.\n\nSee :mod:magic_functions for examples of actual implementation classes."
  },
  {
    "objectID": "notebook.html#parser",
    "href": "notebook.html#parser",
    "title": "Notebook",
    "section": "Parser",
    "text": "Parser\nThe class can be instantiated directly,\n\nm = MyMagics()\n\nto test the parser,\n\nm.location_parser.parse_args('settings -c myclass -C mycategory'.split())\n\nNamespace(settings='settings', cls='myclass', category=['mycategory'])\n\n\nWhen no category nor class are passed:\n\nm.location_parser.parse_args('settings'.split())\n\nNamespace(settings='settings', cls=None, category=None)\n\n\nParsed category is always a list\n\nm.location_parser.parse_args('settings -c myc -C cat 1'.split())\n\nNamespace(settings='settings', cls='myc', category=['cat', '1'])\n\n\njson should be used to pass the category. Then, within the magic, the category list is joined (with a space) and parsed back using json to whatever type it originally had.\n\ncategory = 'foo'\nline = m.location_parser.parse_args(f'settings -c myc -C {json.dumps(category)}'.split())\njson.loads(' '.join(line.category))\n\n'foo'\n\n\n\ncategory = 'foo foo'\nline = m.location_parser.parse_args(f'settings -c myc -C {json.dumps(category)}'.split())\njson.loads(' '.join(line.category))\n\n'foo foo'\n\n\n\ncategory = ['cat', 'subcat']\nline = m.location_parser.parse_args(f'settings -c myc -C {json.dumps(category)}'.split())\njson.loads(' '.join(line.category))\n\n['cat', 'subcat']\n\n\nNotice that a json-dumped string is not equal to the string,\n\njson.dumps('Category 1') == 'Category 1'\n\nFalse\n\n\nmeaning that, if in a variable, the category must always be dumped"
  },
  {
    "objectID": "notebook.html#actual-use",
    "href": "notebook.html#actual-use",
    "title": "Notebook",
    "section": "Actual use",
    "text": "Actual use\nMagics must be somehow registered\n\n# %lmagic -n foo\n\n\nsettings = py2gift.input_file.Settings()\ncategory_name = settings.add_category('Category 1')\nsettings.add_or_update_class(category_name=category_name, class_name='question name', question_base_name='base name', n_instances=2)\n\n\nsettings.to_dict()\n\n{'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics',\n 'categories': [{'name': 'Category 1',\n   'classes': [{'name': 'question name',\n     'question base name': 'base name',\n     'number of instances': 2}]}]}\n\n\n\nConsider\n\nbla bla\n\n'statement recorded'\n\n\n\nsettings\n\n{'categories': [{'classes': [{'name': 'question name',\n                              'number of instances': 2,\n                              'question base name': 'base name',\n                              'statement': 'Consider\\n\\nbla bla\\n'}],\n                 'name': 'Category 1'}],\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}\n\n\n\ncls = 'ClassA'\ncategory = 'Category 1'\nsettings.add_or_update_class(category_name=category, class_name=cls, question_base_name='base name', n_instances=2)\n\n\nsettings\n\n{'categories': [{'classes': [{'name': 'question name',\n                              'number of instances': 2,\n                              'question base name': 'base name',\n                              'statement': 'Consider\\n\\nbla bla\\n'},\n                             {'name': 'ClassA',\n                              'number of instances': 2,\n                              'question base name': 'base name'}],\n                 'name': 'Category 1'}],\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}\n\n\n\nmore blah\n\n'statement recorded'\n\n\n\ncls = 'cls'\ncategory = 'foo foo'\n\nsettings = py2gift.input_file.Settings()\ncategory_name = settings.add_category(category)\nsettings.add_or_update_class(category_name=category_name, class_name=cls, question_base_name='base name', n_instances=2)\n\n\nmore\n\n'statement recorded'\n\n\n\ncls = 'cls'\ncategory = 'wap wap'\nbase_category = 'oh'\n\nsettings = py2gift.input_file.Settings()\ncategory_name = settings.add_category(category_name=category, base_category=base_category)\nsettings.add_or_update_class(category_name=category_name, class_name=cls, question_base_name='base name', n_instances=2)\n\n\ncategory_name\n\n['oh', 'oh/wap wap']\n\n\n\nsettings\n\n{'categories': [{'classes': [{'name': 'cls',\n                              'number of instances': 2,\n                              'question base name': 'base name'}],\n                 'name': ['oh', 'oh/wap wap']}],\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}\n\n\n\nWe must...\n\n'feedback recorded'\n\n\n\nsettings\n\n{'categories': [{'classes': [{'feedback': 'We must...\\n',\n                              'name': 'cls',\n                              'number of instances': 2,\n                              'question base name': 'base name'}],\n                 'name': ['oh', 'oh/wap wap']}],\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}"
  },
  {
    "objectID": "question.html",
    "href": "question.html",
    "title": "Questions’ generators",
    "section": "",
    "text": "In order to avoid tqdm’s experimental warning"
  },
  {
    "objectID": "question.html#text-with-formulas-and-wildcards",
    "href": "question.html#text-with-formulas-and-wildcards",
    "title": "Questions’ generators",
    "section": "Text with formulas and wildcards",
    "text": "Text with formulas and wildcards\nA class to contain text that might include wildcards (“!”) and \\(\\LaTeX\\) formulas. It is ultimately a wrapper around Python’s string.Template.\n\nsource\n\nTemplatedLatexText\n\n TemplatedLatexText (raw_text:str)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nt = TemplatedLatexText('''Compute the probability of error when !element_transmitted is transmitted and the power of thermal noise is $\\frac{N_0}{2}=!noise_variance$.''')\n\nJust evaluating the object shows the un-filled text\n\nt\n\nun-filled template:\nCompute the probability of error when $element_transmitted is transmitted and the power of thermal noise is $$\nrac{N_0}{2}=$noise_variance$$.\n\n\n\nt.is_full\n\nFalse\n\n\nCalling the final property without properly filling the wildcards raises an error\n\n# t.final\n\nAfter filling the slots,\n\nt.fill(element_transmitted='A', noise_variance='2')\n\ncalling final is fine\n\nt.final\n\n'Compute the probability of error when A is transmitted and the power of thermal noise is $\\x0crac{N_0}{2}=2$.'\n\n\n\nt.is_full\n\nTrue\n\n\nIn such a case, evaluating the object returns the same thing (the final text)\n\nt\n\nCompute the probability of error when A is transmitted and the power of thermal noise is $\nrac{N_0}{2}=2$.\n\n\nIf the wrapped text does not contain any wildcard, !, then there is no need to call fill to get the final text.\n\nt = TemplatedLatexText('foo foo $A$')\n\n\nt.is_full\n\nTrue\n\n\n\nt\n\nfoo foo $A$\n\n\nFor automatic conversion of different types to string\n\nTemplatedLatexText.type_to_processing_function\n\n{str: <function __main__.TemplatedLatexText.<lambda>(x)>,\n pathlib.PosixPath: <function __main__.TemplatedLatexText.<lambda>(x)>,\n numpy.ndarray: <function py2gift.tex.from_matrix(m: Union[list, numpy.ndarray], float_point_precision: int = 3) -> str>,\n list: <function py2gift.tex.from_matrix(m: Union[list, numpy.ndarray], float_point_precision: int = 3) -> str>,\n int: <function py2gift.tex.from_number(n: Union[int, float], prefix: str = '', precision: int = 3, fixed_point_format: bool = False) -> str>,\n float: <function py2gift.tex.from_number(n: Union[int, float], prefix: str = '', precision: int = 3, fixed_point_format: bool = False) -> str>,\n numpy.int64: <function py2gift.tex.from_number(n: Union[int, float], prefix: str = '', precision: int = 3, fixed_point_format: bool = False) -> str>,\n numpy.float64: <function py2gift.tex.from_number(n: Union[int, float], prefix: str = '', precision: int = 3, fixed_point_format: bool = False) -> str>}\n\n\n\nvar = 'hola'\ntex = TemplatedLatexText.type_to_processing_function[type(var)](var)\npy2gift.util.render_latex(tex)\n\nhola\n\n\n\nvar = 4\ntex = TemplatedLatexText.type_to_processing_function[type(var)](var)\npy2gift.util.render_latex(tex)\n\n4\n\n\n\nvar = 4.2\ntex = TemplatedLatexText.type_to_processing_function[type(var)](var)\npy2gift.util.render_latex(tex)\n\n4.2\n\n\n\nvar = np.arange(3)\ntex = TemplatedLatexText.type_to_processing_function[type(var)](var, to_formula=True)\npy2gift.util.render_latex(tex)\n\n\\(\\Large \\begin{bmatrix}0 & 1 & 2\\end{bmatrix}\\)\n\n\n\nvar = [4,5]\ntex = TemplatedLatexText.type_to_processing_function[type(var)](var, to_formula=True)\npy2gift.util.render_latex(tex)\n\n\\(\\Large \\begin{bmatrix}4 & 5\\end{bmatrix}\\)"
  },
  {
    "objectID": "question.html#generators",
    "href": "question.html#generators",
    "title": "Questions’ generators",
    "section": "Generators",
    "text": "Generators\nA class implementing a generic question.\n\nsource\n\nQuestionGenerator\n\n QuestionGenerator (statement:__main__.TemplatedLatexText,\n                    feedback:__main__.TemplatedLatexText,\n                    time:Optional[int]=None, prng:numpy.random.mtrand.Rand\n                    omState=RandomState(MT19937) at 0x7F45F92D2A40)\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "question.html#numerical-question",
    "href": "question.html#numerical-question",
    "title": "Questions’ generators",
    "section": "Numerical question",
    "text": "Numerical question\n\nsource\n\nNumericalQuestionGenerator\n\n NumericalQuestionGenerator (statement:__main__.TemplatedLatexText,\n                             feedback:__main__.TemplatedLatexText,\n                             time:Optional[int]=None, prng:numpy.random.mt\n                             rand.RandomState=RandomState(MT19937) at\n                             0x7F45F92D2B40)\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "question.html#multiple-choice",
    "href": "question.html#multiple-choice",
    "title": "Questions’ generators",
    "section": "Multiple choice",
    "text": "Multiple choice\n\nsource\n\nMultipleChoiceQuestionGenerator\n\n MultipleChoiceQuestionGenerator (statement:__main__.TemplatedLatexText,\n                                  feedback:__main__.TemplatedLatexText,\n                                  time:Optional[int]=None, prng:numpy.rand\n                                  om.mtrand.RandomState=RandomState(MT1993\n                                  7) at 0x7F45F92D2840)\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "question.html#theoretical",
    "href": "question.html#theoretical",
    "title": "Questions’ generators",
    "section": "Theoretical",
    "text": "Theoretical\n\nsource\n\nMultipleChoiceTheoreticalQuestionGenerator\n\n MultipleChoiceTheoreticalQuestionGenerator\n                                             (statement:__main__.Templated\n                                             LatexText, feedback:__main__.\n                                             TemplatedLatexText,\n                                             time:Optional[int]=None, prng\n                                             :numpy.random.mtrand.RandomSt\n                                             ate=RandomState(MT19937) at\n                                             0x7F45F92D2840)\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "markdown.html",
    "href": "markdown.html",
    "title": "Markdown",
    "section": "",
    "text": "In order to avoid tqdm’s experimental warning"
  },
  {
    "objectID": "markdown.html#creating-a-header-in-markdown",
    "href": "markdown.html#creating-a-header-in-markdown",
    "title": "Markdown",
    "section": "Creating a header in markdown",
    "text": "Creating a header in markdown\n\nsource\n\nmarkdown_header\n\n markdown_header (text:str, template:string.Template=<string.Template\n                  object at 0x7fbf53bbd4b0>)\n\nReturns a markdown header for a given text.\nParameters\n\ntext : str\nText for the header.\ntemplate : string template\nThe template that defines the appearance of the header, and in which text will be embedded.\n\nReturns\n\nout : str Markdown-compatible text.\n\n\npy2gift.util.render_latex(markdown_header('Header 1'))\n\nHeader 1"
  },
  {
    "objectID": "markdown.html#markdown-from-user-settings-for-a-question",
    "href": "markdown.html#markdown-from-user-settings-for-a-question",
    "title": "Markdown",
    "section": "Markdown from user settings for a question",
    "text": "Markdown from user settings for a question\nAn example numerical question…\n\nquestion_settings = {\n    'name': 'Q1',\n    'class': 'Numerical',\n    'statement': 'Consider the constellation\\nsample_images/1D_3_elements.svg',\n    'solution': {\n        'value': 42,\n        'error': '10%'\n    },\n    'feedback': 'We need to...'\n}\nclass_name = gift_wrapper.question.user_settings_to_class_init(question_settings)\nnumerical_question = getattr(gift_wrapper.question, class_name)(**question_settings)\n\n…and one of multiple choice\n\nquestion_settings = {\n    'name': 'Q2',\n    'class': 'MultipleChoice',\n    'statement': 'Choose...',\n    'answers':{\n        'perfect': 'yep',\n        'wrong': ['foo', 'fa']\n    },\n    'feedback': 'We need to...'\n}\nclass_name = gift_wrapper.question.user_settings_to_class_init(question_settings)\nmultiple_choice_question = getattr(gift_wrapper.question, class_name)(**question_settings)"
  },
  {
    "objectID": "markdown.html#patching-gift-wrapper-questions",
    "href": "markdown.html#patching-gift-wrapper-questions",
    "title": "Markdown",
    "section": "Patching gift-wrapper questions",
    "text": "Patching gift-wrapper questions\n\nBase (abstract) HtmlQuestion\n\nsource\n\n\nhtml_question_to_markdown\n\n html_question_to_markdown ()\n\n\npy2gift.util.render_latex(html_question_to_markdown(numerical_question))\n\nStatement\nConsider the constellation\nsample_images/1D_3_elements.svg\nFeedback\nWe need to…\n\n\n\n\nNumerical question\n\nsource\n\n\nnumerical_to_markdown\n\n numerical_to_markdown ()\n\n\npy2gift.util.render_latex(numerical_question.to_markdown())\n\nStatement\nConsider the constellation\nsample_images/1D_3_elements.svg\nFeedback\nWe need to…\nSolution\n42 (error: .2)\n\n\n\n\nMultiple-choice question\n\nsource\n\n\nmultiple_choice_to_markdown\n\n multiple_choice_to_markdown ()\n\n\npy2gift.util.render_latex(multiple_choice_question.to_markdown())\n\nStatement\nChoose…\nFeedback\nWe need to…\nChoices\n\nyep\nfoo\nfa"
  },
  {
    "objectID": "markdown.html#a-gift-wrapper-processor-to-reformat-paths-for-markdown",
    "href": "markdown.html#a-gift-wrapper-processor-to-reformat-paths-for-markdown",
    "title": "Markdown",
    "section": "A gift-wrapper processor to reformat paths for markdown",
    "text": "A gift-wrapper processor to reformat paths for markdown\n\nsource\n\nSvgToMarkdown\n\n SvgToMarkdown ()\n\nProcessor to reformat svg files for including them in markdown strings.\n\nsource\n\n\nfrom_question\n\n from_question (q:gift_wrapper.question.HtmlQuestion,\n                processors:List[gift_wrapper.transformer.Transformer])\n\nReturns the markdown representation of a question.\nParameters\n\nq : gift_wrapper.question.HtmlQuestion\nThe question object.\nprocessors : list\nProcessors to be applied.\n\nReturns\n\nout : str Markdown-compatible text.\n\n\npy2gift.util.render_latex(from_question(numerical_question, pre_processors))\n\nStatement\nConsider the constellation\n\nFeedback\nWe need to…\nSolution\n42 (error: .2)\n\n\n\nsource\n\n\nsettings_to_markdown\n\n settings_to_markdown (settings:dict)\n\nReturns a markdown representation of the question given the corresponding settings.\nParameters\n\nsettings : dict\nUser settings (usually read from a YAML file).\n\nReturns\n\nmarkdown: str\nMarkdown representation"
  },
  {
    "objectID": "time.html",
    "href": "time.html",
    "title": "time",
    "section": "",
    "text": "An object to keep track of time:\n\nsource\n\n\n\n TimeKeeper ()\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "time.html#for-categories",
    "href": "time.html#for-categories",
    "title": "time",
    "section": "For categories",
    "text": "For categories\nAfter initialization,\n\ntime_keeper = TimeKeeper()\n\nit can be used to keep track of time by passing it the minutes an exercise should take and the category it belongs to\n\ntime_keeper.record(10, 'Cat 1')\ntime_keeper.record(15, 'Cat 2')\ntime_keeper.record(5, ['Cat 3', 'Cat 3/subcat'])\ntime_keeper.record(2, ['Cat 3', 'Cat 3/subcat/subsubcat'])\n\nIt’s also fine to pass a json-serialized list (or string)\n\ntime_keeper.record(1, json.dumps(['Cat 4', 'Cat 4/cat 4 subcat']))\ntime_keeper.record(2, json.dumps('Cat 5'))\n\n\ntime_keeper.df\n\n\n\n\n\n  \n    \n      \n      time\n    \n    \n      category\n      \n    \n  \n  \n    \n      Cat 1\n      10\n    \n    \n      Cat 2\n      15\n    \n    \n      subcat\n      5\n    \n    \n      subsubcat\n      2\n    \n    \n      cat 4 subcat\n      1\n    \n    \n      Cat 5\n      2\n    \n  \n\n\n\n\n\nprint(time_keeper)\n\nAccumulated time: 35 minutes\n\n\n\ntime_keeper.plot()\n\n<Axes: >"
  },
  {
    "objectID": "time.html#for-questions",
    "href": "time.html#for-questions",
    "title": "time",
    "section": "For questions",
    "text": "For questions\nAfter initialization,\n\ntime_keeper = TimeKeeper()\n\nit can keep tabs on the time required by every question\n\ntime_keeper.record_question(10, 'Q1')\ntime_keeper.record_question(3, 'Q2')\ntime_keeper.record_question(8, 'Q3')\ntime_keeper.record_question(12, 'Q4')\n\n\ntime_keeper.df\n\n\n\n\n\n  \n    \n      \n      time\n    \n    \n      category\n      \n    \n  \n  \n    \n      Q1\n      10\n    \n    \n      Q2\n      3\n    \n    \n      Q3\n      8\n    \n    \n      Q4\n      12\n    \n  \n\n\n\n\n\ntime_keeper.plot()\nprint(time_keeper)\n\nAccumulated time: 33 minutes"
  },
  {
    "objectID": "util.html",
    "href": "util.html",
    "title": "util",
    "section": "",
    "text": "In order to avoid tqdm’s experimental warning"
  },
  {
    "objectID": "util.html#rendering-latex-in-a-notebook",
    "href": "util.html#rendering-latex-in-a-notebook",
    "title": "util",
    "section": "Rendering latex in a notebook",
    "text": "Rendering latex in a notebook\nConvenience function to print \\(\\LaTeX\\) text in Jupyter Notebook code (as opposed to markdown) cells. The purpose is to print \\(\\LaTeX\\) content that is only known at run time. Font size of every formula is increased (to \\Large).\n\nsource\n\nrender_latex\n\n render_latex (text:str)\n\nReturns latex-aware markdown text\n\n\n\n\nType\nDetails\n\n\n\n\ntext\nstr\nInput text\n\n\nReturns\nstr\nMarkdown text\n\n\n\n\nrender_latex('Bla blah...')\n\nBla blah…\n\n\n\nrender_latex('Variable $A$')\n\nVariable \\(\\Large A\\)"
  },
  {
    "objectID": "util.html#accessors",
    "href": "util.html#accessors",
    "title": "util",
    "section": "Accessors",
    "text": "Accessors\nPandas‘s accessors mechanishm is leveraged here. In order to do that, first Pandas’ _register_accessor method was aliased above as simply register_accessor. Then a new base class, AccessorEndowedClass, from which any class exposing an accessor must inherit, is created. The only thing it does is adding a class attribute that is expected by Pandas’ _register_accessor method.\n\nsource\n\nAccessorEndowedClass\n\n AccessorEndowedClass ()\n\nInitialize self. See help(type(self)) for accurate signature.\nFor instance\n\nclass Car(AccessorEndowedClass):\n    \n    def __init__(self, weight):\n        \n        self.weight = weight\n\n@register_accessor('seat', Car)\nclass SeatAccessor:\n    \n    def __init__(self, car: Car):\n        \n        self._confortable: bool = True\n    \n    @property\n    def confortable(self):\n        \n        return self._confortable\n\nAccessing the class itself\n\ncar = Car(1600)\ncar.weight\n\n1600\n\n\nAccessing the appended accessor\n\ncar.seat.confortable\n\nTrue"
  },
  {
    "objectID": "util.html#assorted",
    "href": "util.html#assorted",
    "title": "util",
    "section": "Assorted",
    "text": "Assorted\nA function to turn an integer into a roman number. Adapted from here.\n\nsource\n\nint_to_roman\n\n int_to_roman (num:int)\n\nReturns an integer number in roman format\n\n\n\n\nType\nDetails\n\n\n\n\nnum\nint\nInput\n\n\nReturns\nstr\nRoman number for the input\n\n\n\n\nprint(int_to_roman(53))\n\nLIII"
  },
  {
    "objectID": "util.html#files",
    "href": "util.html#files",
    "title": "util",
    "section": "Files",
    "text": "Files\n\nWriting a dictionary into a YAML file\nA function to write a dictionary to a YAML file with some formatting.\n\nsource\n\n\ndict_to_yaml\n\n dict_to_yaml (d:dict, output_file:str|pathlib.Path)\n\nWrites a dictionary in a YAML file\n\n\n\n\nType\nDetails\n\n\n\n\nd\ndict\nInput\n\n\noutput_file\nstr | pathlib.Path\nOuput\n\n\nReturns\nNone\n\n\n\n\n\nyaml_file = '_test.yaml'\nd = {'foo': 1, 'ouch': 'psss'}\ndict_to_yaml(d, yaml_file)\n\n\n\n\nfoo: 1\nouch: psss\n\n\n\n\nExtracting a dictionary from a YAML file\n\nsource\n\n\nyaml_to_dict\n\n yaml_to_dict (file:str|pathlib.Path)\n\nReads a dictionary from a YAML file\n\n\n\n\nType\nDetails\n\n\n\n\nfile\nstr | pathlib.Path\nInput file\n\n\nReturns\ndict\nOutput\n\n\n\n\nyaml_to_dict(yaml_file)\n\n{'foo': 1, 'ouch': 'psss'}"
  },
  {
    "objectID": "util.html#writing-an-input-file-for-gift-wrapper",
    "href": "util.html#writing-an-input-file-for-gift-wrapper",
    "title": "util",
    "section": "Writing an input file for gift-wrapper",
    "text": "Writing an input file for gift-wrapper\n\nsource\n\nwrite_multiple_categories\n\n write_multiple_categories (category_questions:dict[str,list[dict]],\n                            pictures_base_directory:str,\n                            output_file:str|None='out.yaml')\n\nWrites a file suitable as input to gift-wrapper\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncategory_questions\ndict\n\nEvery key is the name of a category, and every value is a list of questions (every question is itself a dictionary)\n\n\npictures_base_directory\nstr\n\nThe “pictures base directory” parameter that must be passed to gift-wrapper\n\n\noutput_file\nstr | None\nout.yaml\nOutput file\n\n\nReturns\nNone\n\n\n\n\n\nWe build a dictionary with questions belonging different categories. This might be read from a YAML file.\n\ncategory_questions_example = {\n    ('Category A', 'Category B'): [\n        {\n            'class': 'MultipleChoice',\n            'statement': 'Compute the entropy....\\n',\n            'feedback': 'We just need to...\\n',\n            'time': '3',\n            'answers': {\n                'perfect': '1',\n                'wrong': ['0', '2']\n            },\n            'name': 'Entropy of a random variable I'\n        }\n    ],\n    'Category C': [\n        {\n            'class': 'Numerical',\n            'statement': 'Compute the average....\\n',\n            'feedback': 'In order to...\\n',\n            'time': '3',\n            'solution': {\n                'value': 3.1,\n                'error': '10%'\n            }, \n            'name': 'Mean energy I'\n        }\n    ]\n}\ncategory_questions_example\n\n{('Category A',\n  'Category B'): [{'class': 'MultipleChoice',\n   'statement': 'Compute the entropy....\\n',\n   'feedback': 'We just need to...\\n',\n   'time': '3',\n   'answers': {'perfect': '1', 'wrong': ['0', '2']},\n   'name': 'Entropy of a random variable I'}],\n 'Category C': [{'class': 'Numerical',\n   'statement': 'Compute the average....\\n',\n   'feedback': 'In order to...\\n',\n   'time': '3',\n   'solution': {'value': 3.1, 'error': '10%'},\n   'name': 'Mean energy I'}]}\n\n\n\noutput_file = '_output.yaml'\nwrite_multiple_categories(category_questions_example, 'pics', output_file)\n\n\n\n\npictures base directory: pics\ncategories:\n  - name:\n      - Category A\n      - Category B\n    questions:\n      - class: MultipleChoice\n        statement: \"Compute the entropy....\\n\"\n        feedback: \"We just need to...\\n\"\n        time: '3'\n        answers:\n          perfect: '1'\n          wrong:\n            - '0'\n            - '2'\n        name: Entropy of a random variable I\n  - name: Category C\n    questions:\n      - class: Numerical\n        statement: \"Compute the average....\\n\"\n        feedback: \"In order to...\\n\"\n        time: '3'\n        solution:\n          value: 3.1\n          error: 10%\n        name: Mean energy I\n\n\n\n!rm {output_file}"
  },
  {
    "objectID": "util.html#question-related",
    "href": "util.html#question-related",
    "title": "util",
    "section": "Question-related",
    "text": "Question-related\n\nNaming different versions (instances) of a question\nAdds a name to every question in a list based on a pattern. It is meant to distinctly name different versions of the same question. Notice that, for this function, a question is simply a dictionary (no checks are performed).\n\nsource\n\n\nadd_name\n\n add_name (questions:list[dict], base_name:str)\n\nAdds a name to every question based on a pattern\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nquestions\nlist\nList of questions; every question is a dictionary\n\n\nbase_name\nstr\nAll the questions will be given this name and a different (Roman) number\n\n\nReturns\nlist\nList with the same questions after adding the corresponding name to each one\n\n\n\n\nadd_name([{'k1': 'aa', 'k2': 1}, {'k3': 'pi', 'foo': 'variance'}], 'base')\n\n[{'k1': 'aa', 'k2': 1, 'name': 'base I'},\n {'k3': 'pi', 'foo': 'variance', 'name': 'base II'}]\n\n\n\n\nObtaining wrong solutions from the correct one\n\nsource\n\n\nwrong_numerical_solutions_from_correct_one\n\n wrong_numerical_solutions_from_correct_one (solution:float, n:int,\n                                             min_sep:float, max_sep:float,\n                                             lower_bound:float|None=-inf,\n                                             upper_bound:float|None=inf,\n                                             precision:int|None=4,\n                                             to_str:bool|None=True, fixed_\n                                             point_format:bool|None=False,\n                                             bin_width:float|None=None,\n                                             unique:bool|None=False, prng:\n                                             numpy.random.mtrand.RandomSta\n                                             te|None=RandomState(MT19937)\n                                             at 0x7FBF54983740)\n\nGenerates random numerical wrong answers given the correct one\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsolution\nfloat\n\nThe actual solution\n\n\nn\nint\n\nThe number of wrong solutions\n\n\nmin_sep\nfloat\n\nMinimum separation\n\n\nmax_sep\nfloat\n\nMaximum separation\n\n\nlower_bound\nfloat | None\n-inf\nA lower bound on the returned numbers\n\n\nupper_bound\nfloat | None\ninf\nA upper bound on the returned numbers\n\n\nprecision\nint | None\n4\nThe number of decimal places\n\n\nto_str\nbool | None\nTrue\nIf True, every element in the result will be converted to a string\n\n\nfixed_point_format\nbool | None\nFalse\nOnly meaningful when to_str is True. In such case, if True a fixed-point format (f) is used regardless of the actual type\n\n\nbin_width\nfloat | None\nNone\nThe granularity on the answers: every one will be a multiple of this parameter\n\n\nunique\nbool | None\nFalse\nIf True, all the answers will be different\n\n\nprng\nnumpy.random.mtrand.RandomState | None\nRandomState(MT19937)\nA pseudo-random numbers generator\n\n\nReturns\nlist[float] | list[str]\n\nThe random wrong solutions\n\n\n\n\nwrong_numerical_solutions_from_correct_one(solution=0.8, n=10, min_sep=0.1, max_sep=0.5, lower_bound=0.2, upper_bound=2, prng = np.random.RandomState(42))\n\n['1.14',\n '1.193',\n '1.05',\n '0.9232',\n '0.3535',\n '0.4168',\n '0.4605',\n '0.3197',\n '0.9624',\n '0.6376']\n\n\nNumbers instead of strings\n\nwrong_numerical_solutions_from_correct_one(\n    solution=0.8, n=4, min_sep=0.2, max_sep=0.5, lower_bound=0.2, upper_bound=0.9, to_str=False,\n    prng = np.random.RandomState(42))\n\n[0.3148, 0.4204, 0.5532, 0.3401]\n\n\nIf the solution cannot be anything, you might want to pass a bin_width so that it doesn’t immediately stand out from the wrong answers,\n\nwrong_numerical_solutions_from_correct_one(\n    solution=0.8, n=8, min_sep=0.1, max_sep=2, lower_bound=0.2, upper_bound=2, to_str=False, bin_width=0.1,\n    prng = np.random.RandomState(42))\n\n[1.1, 1.5, 0.2, 0.6, 1.5, 1.2, 1.9, 1.9]\n\n\nIf duplicates must be avoided unique can be set to True,\n\nwrong_numerical_solutions_from_correct_one(\n    solution=0.8, n=8, min_sep=0.1, max_sep=2, lower_bound=0.2, upper_bound=2, to_str=False, bin_width=0.1,\n    unique=True, prng = np.random.RandomState(42))\n\n[1.0, 1.2, 1.5, 0.7, 0.6, 0.2, 1.9, 1.1]\n\n\nLower and upper bound can be ommited\n\nwrong_numerical_solutions_from_correct_one(\n    solution=0.8, n=8, min_sep=0.5, max_sep=10, to_str=False, bin_width=0.1, unique=True,\n    prng = np.random.RandomState(42))\n\n[6.4, -8.9, 9.5, -1.7, -6.8, 7.3, -8.3, 2.7]\n\n\nWhen requesting strings, a floating point format can be enforced by using the parameter fixed_point_format,\n\nwrong_numerical_solutions_from_correct_one(\n    solution=0.8, n=8, min_sep=0.5, max_sep=10, to_str=True, fixed_point_format=True, bin_width=0.1, unique=True,\n    prng = np.random.RandomState(42))\n\n['6.4000',\n '-8.9000',\n '9.5000',\n '-1.7000',\n '-6.8000',\n '7.3000',\n '-8.3000',\n '2.7000']"
  },
  {
    "objectID": "tex.html",
    "href": "tex.html",
    "title": "tex",
    "section": "",
    "text": "In order to avoid tqdm’s experimental warning"
  },
  {
    "objectID": "tex.html#decorating-a-function-so-that-it-can-return-a-formula",
    "href": "tex.html#decorating-a-function-so-that-it-can-return-a-formula",
    "title": "tex",
    "section": "Decorating a function so that it can return a formula",
    "text": "Decorating a function so that it can return a formula\nA decorator that allows (optionally) the string returned by any function to be enclosed between $s.\n\nsource\n\nto_formula_maybe\n\n to_formula_maybe (func:Callable[...,Any])\n\nDecorator for adding the argument to_formula to any function\n\n\n\n\nType\nDetails\n\n\n\n\nfunc\nCallable\nFunction returning a string\n\n\nReturns\nstr\n\\(\\LaTeX\\) formula\n\n\n\nAs an example\n\ndef to_radians(n_cycles: int) -> float:\n    \n    return n_cycles * 3.14\n\n\nto_radians(2)\n\n6.28\n\n\nA module that allows to inspect functions.\n\nimport inspect\n\n\ninspect.signature(to_radians)\n\n<Signature (n_cycles: int) -> float>\n\n\n\n@to_formula_maybe\ndef to_radians(n_cycles: int) -> float:\n    \n    return n_cycles * 3.14\n\nSignature of the decorated function is the same\n\ninspect.signature(to_radians)\n\n<Signature (n_cycles: int) -> float>\n\n\nThe function can be used as though it has not been decorated…\n\nto_radians(2)\n\n6.28\n\n\n…or can be requested to produce a \\(\\LaTeX\\) formula\n\nto_radians(2, to_formula=True)\n\n'$6.28$'\n\n\nrender_latex can be used to properly render it in the notebook:\n\nrender_latex(to_radians(2, to_formula=True))\n\n\\(\\Large 6.28\\)"
  },
  {
    "objectID": "tex.html#enumerating-the-strings-in-a-list",
    "href": "tex.html#enumerating-the-strings-in-a-list",
    "title": "tex",
    "section": "Enumerating the strings in a list",
    "text": "Enumerating the strings in a list\n\nsource\n\njoin\n\n join (strings_list:list[str], nexus:str=' and ', to_formula:bool=True)\n\nEnumerates the strings in a list, optionally enclosing every element between $s\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstrings_list\nlist\n\nStrings to be joined\n\n\nnexus\nstr\nand\nText between the second to last and last elements\n\n\nto_formula\nbool\nTrue\nIf True every string will be enclosed in $s\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\n\ntex = join(['a', 'b', 'c'])\nrender_latex(tex)\n\n\\(\\Large a\\), \\(\\Large b\\) and \\(\\Large c\\)\n\n\n\ntex = join(['a', 'b', 'c'], nexus=' y ')\nrender_latex(tex)\n\n\\(\\Large a\\), \\(\\Large b\\) y \\(\\Large c\\)\n\n\n\ntex = join(['2', '\\sigma'])\nrender_latex(tex)\n\n\\(\\Large 2\\) and \\(\\Large \\sigma\\)\n\n\n\ntex = join(['2', '3', '4'], nexus=', ')\nrender_latex(tex)\n\n\\(\\Large 2\\), \\(\\Large 3\\), \\(\\Large 4\\)"
  },
  {
    "objectID": "tex.html#gaussian-probability-density-function",
    "href": "tex.html#gaussian-probability-density-function",
    "title": "tex",
    "section": "Gaussian probability density function",
    "text": "Gaussian probability density function\nThe expression of a (univariate) Gaussian probability density function.\n\nsource\n\ngaussian_pdf\n\n gaussian_pdf (x:str|None='x', mean:str|None='\\\\mu',\n               variance:str|None='\\\\sigma^2')\n\nReturns a string representing the probability density function for a Gaussian distribution\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nx\nstr | None\nx\nThe random variable\n\n\nmean\nstr | None\n\nThe mean of the random variable\n\n\nvariance\nstr | None\n^2\nThe variance of the random variable\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\nWith no arguments, it yields the usual formula,\n\ntex = gaussian_pdf(to_formula=True)\nrender_latex(tex)\n\n\\(\\Large \\frac{1}{\\sqrt{2\\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\\)\n\n\nThe arguments allow to use different symbols for the random variable, the mean and the variance\n\ntex = gaussian_pdf(x=\"n\", mean=\"m\", variance=\"v\", to_formula=True)\nrender_latex(tex)\n\n\\(\\Large \\frac{1}{\\sqrt{2\\pi v}}e^{-\\frac{(n-m)^2}{2v}}\\)"
  },
  {
    "objectID": "tex.html#stirlings-approximation-to-the-q-function",
    "href": "tex.html#stirlings-approximation-to-the-q-function",
    "title": "tex",
    "section": "Stirling’s approximation to the Q function",
    "text": "Stirling’s approximation to the Q function\n\nsource\n\nq_function_approximation\n\n q_function_approximation (x:str|None='x')\n\nReturns a string representing the Stirling approximation for the Q function\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nx\nstr | None\nx\nThe argument of the Q function\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\nWith no arguments, the argument is \\(x\\)\n\ntex = q_function_approximation(to_formula=True)\nrender_latex(tex)\n\n\\(\\Large Q(x) \\approx \\frac{1}{2} e^{-\\frac{x^2}{2}}\\)\n\n\nbut a specific variable can be passed\n\ntex = q_function_approximation('t', to_formula=True)\nrender_latex(tex)\n\n\\(\\Large Q(t) \\approx \\frac{1}{2} e^{-\\frac{t^2}{2}}\\)"
  },
  {
    "objectID": "tex.html#part-wise-defined-functions",
    "href": "tex.html#part-wise-defined-functions",
    "title": "tex",
    "section": "Part-wise defined functions",
    "text": "Part-wise defined functions\n\nsource\n\npartwise_function\n\n partwise_function (function:str, parts:list[tuple[str,str]],\n                    add_zero_otherwise:bool|None=True)\n\nReturns a string representing the definition a part-wise mathematical function\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfunction\nstr\n\nThe name of the function\n\n\nparts\nlist\n\nEach element is a tuple yields whose 1st element is the value of the function and whose second is a condition stating where the 1st applies\n\n\nadd_zero_otherwise\nbool | None\nTrue\nIf True, one last part stating “0, otherwise” is added\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\n\ntex = partwise_function('f(x)', [('x+1', '0 < x \\le 1'), ('x-1', '1 < x \\le 2')], to_formula=True)\nrender_latex(tex)\n\n\\(\\Large f(x)=\\begin{cases} x+1,& 0 < x \\le 1 \\\\x-1,& 1 < x \\le 2 \\\\0,& \\text{otherwise}\\end{cases}\\)\n\n\n\ntex = partwise_function('f(x)', [('x+1', '0 < x \\le 1')], add_zero_otherwise=False, to_formula=True)\nrender_latex(tex)\n\n\\(\\Large f(x)=\\begin{cases} x+1,& 0 < x \\le 1 \\\\\\end{cases}\\)"
  },
  {
    "objectID": "tex.html#scalar",
    "href": "tex.html#scalar",
    "title": "tex",
    "section": "Scalar",
    "text": "Scalar\n\nsource\n\nfrom_number\n\n from_number (n:int|float, prefix:str|None='', precision:int|None=3,\n              fixed_point_format:bool|None=False)\n\nReturns a string for a given number\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint | float\n\nThe number\n\n\nprefix\nstr | None\n\nA string to be prepended to the number\n\n\nprecision\nint | None\n3\nNumber of decimals if fixed_point_format is True, overall number of figures otherwise (ignored if the number is an integer)\n\n\nfixed_point_format\nbool | None\nFalse\nIf True, a fixed-point format (f) is used regardless of the actual type\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\nValid for both floating point numbers,\n\ntex = from_number(2.3, to_formula=True)\nrender_latex(tex)\n\n\\(\\Large 2.3\\)\n\n\nand integers\n\ntex = from_number(3, to_formula=True)\nrender_latex(tex)\n\n\\(\\Large 3\\)\n\n\nWith a higher precision\n\ntex = from_number(np.pi, precision=6, to_formula=True)\nrender_latex(tex)\n\n\\(\\Large 3.14159\\)\n\n\nNotice that if fixed_point_format is set to False (default), the precision refers to the overall number of figures (g(eneral) format specifier-behaviour). On the other hand, the precision parameter of a fixed-point number controls the number of decimals,\n\ntex = from_number(np.pi, precision=6, fixed_point_format=True, to_formula=True)\nrender_latex(tex)\n\n\\(\\Large 3.141593\\)\n\n\nIf the number is an integer, precision parameter is ignored\n\ntex = from_number(42, to_formula=True)\nrender_latex(tex)\n\n\\(\\Large 42\\)\n\n\nA prefix can be passed:\n\ntex = from_number(42, prefix='a=', to_formula=True)\nrender_latex(tex)\n\n\\(\\Large a=42\\)"
  },
  {
    "objectID": "tex.html#matrix-or-vectorlist",
    "href": "tex.html#matrix-or-vectorlist",
    "title": "tex",
    "section": "Matrix or vector/list",
    "text": "Matrix or vector/list\nFunctions to turn a matrix or vector into \\(\\LaTeX\\) source code.\n\nsource\n\nfrom_matrix\n\n from_matrix (m:list|numpy.ndarray, float_point_precision:int=3)\n\nReturns a string for a given array or matrix\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nm\nlist | numpy.ndarray\n\nMatrix or vector\n\n\nfloat_point_precision\nint\n3\nNumber of decimals (ignored if the number is an integer)\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\nfrom_matrix returns \\(\\LaTeX\\) source code for a list or np.ndarray\nThis can be applied on lists\n\ntex = from_matrix([1, 2, 3], to_formula=True) + ','\nrender_latex(tex)\n\n\\(\\Large \\begin{bmatrix}1 & 2 & 3\\end{bmatrix}\\),\n\n\nor numpy arrays, both 2D\n\ntex = from_matrix(np.array([[1.11, 3.14], [14.2, 5.1]]), to_formula=True) + ','\nrender_latex(tex)\n\n\\(\\Large \\begin{bmatrix}1.11 & 3.14 \\\\ 14.2 & 5.1\\end{bmatrix}\\),\n\n\nand 1D\n\ntex = from_matrix(np.array([14.2, 5.1]), to_formula=True)\nrender_latex(tex)\n\n\\(\\Large \\begin{bmatrix}14.2 & 5.1\\end{bmatrix}\\)\n\n\nIf the numbers are integers, that is taken into account:\n\ntex = from_matrix(np.array([[1, 3], [4, 5]]), to_formula=True)\nrender_latex(tex)\n\n\\(\\Large \\begin{bmatrix}1 & 3 \\\\ 4 & 5\\end{bmatrix}\\)\n\n\n\ntex = from_matrix(np.array([14, 5]), to_formula=True)\nrender_latex(tex)\n\n\\(\\Large \\begin{bmatrix}14 & 5\\end{bmatrix}\\)\n\n\n\ntex = from_matrix([1, 2], to_formula=True)\nrender_latex(tex)\n\n\\(\\Large \\begin{bmatrix}1 & 2\\end{bmatrix}\\)"
  },
  {
    "objectID": "tex.html#dot-product",
    "href": "tex.html#dot-product",
    "title": "tex",
    "section": "Dot product",
    "text": "Dot product\n\nsource\n\ndot_product\n\n dot_product (lhs_template:str, lhs:list, rhs_template:str, rhs:list,\n              product_operator:str|None='',\n              addition_operator:str|None='+')\n\nReturns a string for the dot product of two vectors, regardless of whether they are symbols or numbers\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlhs_template\nstr\n\nLeft-hand side template; it should include a replacement field ({}) that will be replaced by one of the elements in lhs\n\n\nlhs\nlist\n\nLeft-hand side elements\n\n\nrhs_template\nstr\n\nRight-hand side template; it should include a replacement field ({}) that will be replaced by one of the elements in rhs\n\n\nrhs\nlist\n\nRight-hand side elements\n\n\nproduct_operator\nstr | None\n\nSymbol to be used as product operator\n\n\naddition_operator\nstr | None\n+\nSymbol to be used as addition operator\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\n\ntex = dot_product('p(y_1|x_{})', [1, 2], 'p(x_{})', [1,2], to_formula=True)\nrender_latex(tex)\n\n\\(\\Large p(y_1|x_1)p(x_1)+p(y_1|x_2)p(x_2)\\)\n\n\n\ntex = dot_product('{}', [0.1, 0.2], '{}', [0.75, 0.9], product_operator=r'\\cdot', to_formula=True)\nrender_latex(tex)\n\n\\(\\Large 0.1\\cdot0.75+0.2\\cdot0.9\\)"
  },
  {
    "objectID": "tex.html#law-of-total-probability",
    "href": "tex.html#law-of-total-probability",
    "title": "tex",
    "section": "Law of total probability",
    "text": "Law of total probability\n\nsource\n\ntotal_probability\n\n total_probability (fixed_symbol:str, varying_symbol_template:str, n:int,\n                    start_at:int=1)\n\nReturns a string for law of total probability\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfixed_symbol\nstr\n\nThe symbol that stays the same in the summation\n\n\nvarying_symbol_template\nstr\n\nA template for the varying symbol that includes a replacement field ({}) for the index\n\n\nn\nint\n\nThe number of values for the varying symbol\n\n\nstart_at\nint\n1\nThe index at which varying_symbol_templatestarts\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\n\ntex = total_probability('x_1', 'y_{}', 3, to_formula=True)\nrender_latex(tex)\n\n\\(\\Large p(x_1,y_1)+p(x_1,y_2)+p(x_1,y_3)\\)\n\n\nStarting at a different index\n\ntex = total_probability('x_1', 'y_{}', 3, start_at=3, to_formula=True)\nrender_latex(tex)\n\n\\(\\Large p(x_1,y_3)+p(x_1,y_4)+p(x_1,y_5)\\)"
  },
  {
    "objectID": "tex.html#enumerations",
    "href": "tex.html#enumerations",
    "title": "tex",
    "section": "Enumerations",
    "text": "Enumerations\n\nsource\n\nenumerate_math\n\n enumerate_math (numbers_list:list[float], assigned_to:str|None=None,\n                 nexus:str|None=' and ', precision:int|None=3,\n                 start_at:int|None=1)\n\nBuilds a \\(\\TeX\\) string from a list of numbers in which each one is printed after (optionally) being assigned to an indexed variable that follows a given pattern\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnumbers_list\nlist\n\nThe elements to be enumerated\n\n\nassigned_to\nstr | None\nNone\nSome text with a replacement field (this means that any { or } must be escaped by doubling it)\n\n\nnexus\nstr | None\nand\nThe text joining the second to last and last elements\n\n\nprecision\nint | None\n3\nThe number of decimal places\n\n\nstart_at\nint | None\n1\nThe index of the first element that enters the enumeration\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\nUsing the optional assigned_to arguement,\n\ntex = enumerate_math([0.7, 0.9], assigned_to='w_t^{{({})}}')\nrender_latex(tex)\n\n\\(\\Large w_t^{(1)} = 0.7\\) and \\(\\Large w_t^{(2)} = 0.9\\)\n\n\nand without it\n\ntex = enumerate_math([0.7, 0.9])\nrender_latex(tex)\n\n\\(\\Large 0.7\\) and \\(\\Large 0.9\\)\n\n\nStarting at a different index on the left-hand-side\n\ntex = enumerate_math([0.722341, 0.9], assigned_to='w_t^{{({})}}', start_at=2)\nrender_latex(tex)\n\n\\(\\Large w_t^{(2)} = 0.722\\) and \\(\\Large w_t^{(3)} = 0.9\\)\n\n\n\n\nsource\n\n\nenumerate_assignments\n\n enumerate_assignments (lhs_template:str, rhs_template:str,\n                        rhs:list[float], nexus:str=' and ',\n                        precision:int=3, start_at:int=1)\n\nConstructs a enumeration of assignments from left-hand-side and right-hand-side templates and right-hand-side values. It’s similar to enumerate_math when the argument assigned_to is passed to the latter, but more general since the right-hand expression is also obtained from a template\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlhs_template\nstr\n\nText with a replacement field that will be replaced by an index\n\n\nrhs_template\nstr\n\nText with a replacement field that will be replaced by one of the corresponding elements in rhs\n\n\nrhs\nlist\n\nElements to be enumerated\n\n\nnexus\nstr\nand\nThe text joining the second to last and last elements\n\n\nprecision\nint\n3\nThe number of decimal places\n\n\nstart_at\nint\n1\nThe index of the first element that enters the enumeration\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\n\ntex = enumerate_assignments('s_{}', '{}', [1.3,4.1])\nrender_latex(tex)\n\n\\(\\Large s_1 = 1.3\\) and \\(\\Large s_2 = 4.1\\)\n\n\n\ntex = enumerate_assignments('s_{}', '2^{{{}}}', [1.3,4.1], start_at=4)\nrender_latex(tex)\n\n\\(\\Large s_4 = 2^{1.3}\\) and \\(\\Large s_5 = 2^{4.1}\\)\n\n\n\ntex = enumerate_assignments('s_{}', '2^{{{}}}', [1.3,4.1, 3], start_at=4, nexus=', ')\nrender_latex(tex)\n\n\\(\\Large s_4 = 2^{1.3}\\), \\(\\Large s_5 = 2^{4.1}\\), \\(\\Large s_6 = 2^{3}\\)"
  },
  {
    "objectID": "tex.html#expanding-a-symbol",
    "href": "tex.html#expanding-a-symbol",
    "title": "tex",
    "section": "Expanding a symbol",
    "text": "Expanding a symbol\n\nsource\n\nexpand\n\n expand (template:str, n:int, to_math:bool=False, nexus:str=' and ',\n         start_at:int=1)\n\nExpand a symbol according to a pattern\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntemplate\nstr\n\nString with a single replacement field ({})\n\n\nn\nint\n\nRequested number of terms\n\n\nto_math\nbool\nFalse\nIf True, every output term is enclosed between $’s\n\n\nnexus\nstr\nand\nString joining the second to last and last terms\n\n\nstart_at\nint\n1\nThe number at which indexes start\n\n\nReturns\nstr\n\n\\(\\LaTeX\\)-compatible text\n\n\n\n\ntex = expand('s_{}', 3, True)\nrender_latex(tex)\n\n\\(\\Large s_1\\), \\(\\Large s_2\\) and \\(\\Large s_3\\)\n\n\n\ntex = expand('s_{}', 3, True, nexus=', ')\nrender_latex(tex)\n\n\\(\\Large s_1\\), \\(\\Large s_2\\), \\(\\Large s_3\\)"
  },
  {
    "objectID": "file.html",
    "href": "file.html",
    "title": "file",
    "section": "",
    "text": "A small utility function to derive a file path by appending something to the name (and only to the name).\n\nsource\n\n\n\n supplement_file_name (file:str|pathlib.Path, sup:str)\n\nAdds a string between the file name in a path and the suffix\n\n\n\n\nType\nDetails\n\n\n\n\nfile\nstr | pathlib.Path\nFile name\n\n\nsup\nstr\nString to be added\n\n\nReturns\nPath\n“Supplemented” file name\n\n\n\n\nsupplement_file_name('/a/b/picture.tex', '1')\n\nPosixPath('/a/b/picture_1.tex')"
  },
  {
    "objectID": "file.html#generating-a-unique-file-name",
    "href": "file.html#generating-a-unique-file-name",
    "title": "file",
    "section": "Generating a unique file name",
    "text": "Generating a unique file name\n\nsource\n\nunique_name\n\n unique_name (file:str|pathlib.Path)\n\nBuilds a unique file name out of a given one\n\n\n\n\nType\nDetails\n\n\n\n\nfile\nstr | pathlib.Path\nInput file name\n\n\nReturns\nPath\nUnique file name\n\n\n\n\nunique_name('docs/a.pdf')\n\nPosixPath('docs/a_77208efe-c6fc-11ed-afc3-d8cb8aeac823.pdf')"
  },
  {
    "objectID": "hash.html",
    "href": "hash.html",
    "title": "Hash",
    "section": "",
    "text": "Compute a text represenation of matrix\n\nsource\n\n\n\n matrix (matrix:Union[list,numpy.ndarray],\n         decimal_sep_replacement:Optional[bool]='_')\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmatrix\nUnion\n\nInput\n\n\ndecimal_sep_replacement\nOptional\n_\nDecimal point separator\n\n\nReturns\nstr\n\nText representation\n\n\n\nIt can be used on lists,\n\nmatrix([[1, 2], [3,4]])\n\n'1234'\n\n\nor arrays\n\nmatrix(np.array([[1, 2], [3,4]]))\n\n'1234'\n\n\nDecimal separators are by default replaced.\n\nmatrix(np.array([[1.1, 2.2], [3.3,4.4]]))\n\n'1_12_23_34_4'\n\n\nLists are also fine.\n\nmatrix([1.3, 2.4])\n\n'1_32_4'"
  },
  {
    "objectID": "hash.html#for-a-number",
    "href": "hash.html#for-a-number",
    "title": "Hash",
    "section": "For a number",
    "text": "For a number\nCompute a text represenation of number\n\nsource\n\nnumber\n\n number (number:Union[float,numpy.float64],\n         decimal_sep_replacement:Optional[bool]='_')\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnumber\nUnion\n\nInput\n\n\ndecimal_sep_replacement\nOptional\n_\nDecimal point separator\n\n\nReturns\nstr\n\nText representation\n\n\n\n\nnumber(3.14)\n\n'3_14'"
  },
  {
    "objectID": "hash.html#for-a-string",
    "href": "hash.html#for-a-string",
    "title": "Hash",
    "section": "For a string",
    "text": "For a string\nFrom this post: a function to hash any arbitray string.\n\nsource\n\nstring\n\n string (s:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\ns\nstr\nInput\n\n\nReturns\nstr\nText representation\n\n\n\n\nstring('foo-bar#baz?qux@127/\\\\9]')\n\n'foobarbazqux1279'"
  },
  {
    "objectID": "input_file.html",
    "href": "input_file.html",
    "title": "Input file",
    "section": "",
    "text": "In order to avoid tqdm’s experimental warning"
  },
  {
    "objectID": "input_file.html#finding-the-appropriate-settings-in-the-file",
    "href": "input_file.html#finding-the-appropriate-settings-in-the-file",
    "title": "Input file",
    "section": "Finding the appropriate settings in the file",
    "text": "Finding the appropriate settings in the file\nA convenience function to extract the settings of a given class within a certain category. If there are duplicated categories and/or classes, the one that is found first is returned.\n\nsource\n\nextract_class_settings\n\n extract_class_settings (category_name:Union[str,list], class_name:str,\n                         settings:dict)\n\n\noutput file: third_midterm.yaml\npictures base directory: tc/midterm3\npath to gift-wrapper: '~/gift-wrapper/wrap.py'\n\ncategories:\n\n  - name: Entropy of the input given the output\n\n    classes:\n\n      - name: EntropyOfInputGivenOutput\n\n        question base name: Entropy of input given the output\n        \n        init parameters:\n            \n            picture_file: DMCs/entropy_at_input_given_output.tex\n\n        statement: |\n          Consider...\n          \n\n        feedback: |\n          One way of tackling the problem is...\n          \n\n        number of instances: 2\n\nOverwriting _input_.yaml\n\n\n\nwith open(test_file) as yaml_data:\n\n    settings = yaml.load(yaml_data, Loader=yaml.FullLoader)\n\nextract_class_settings('Entropy of the input given the output', 'EntropyOfInputGivenOutput', settings)\n\n{'name': 'EntropyOfInputGivenOutput',\n 'question base name': 'Entropy of input given the output',\n 'init parameters': {'picture_file': 'DMCs/entropy_at_input_given_output.tex'},\n 'statement': 'Consider...\\n',\n 'feedback': 'One way of tackling the problem is...\\n',\n 'number of instances': 2}"
  },
  {
    "objectID": "input_file.html#managing-the-settings-with-an-ad-hoc-object",
    "href": "input_file.html#managing-the-settings-with-an-ad-hoc-object",
    "title": "Input file",
    "section": "Managing the settings with an ad-hoc object",
    "text": "Managing the settings with an ad-hoc object\nA class to manage (in memory) all the settings required to build the questions.\n\nsource\n\nSettings\n\n Settings (output_file:str='quiz.yaml',\n           pictures_directory:str='quiz/pics', test_mode:bool=False)\n\nInitialize self. See help(type(self)) for accurate signature.\nThe object right after initialization:\n\nsettings = Settings()\nsettings\n\n{'categories': None,\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}\n\n\nA scalar category is added (it doesn’t have any class yet)\n\nsettings.add_category('My category')\nsettings\n\n{'categories': [{'classes': None, 'name': 'My category'}],\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}\n\n\nIf test_mode is set to True when instantiating the class,\n\nsettings = Settings(test_mode=True)\n\nthen the passed category name is ignored and test is used\n\ncategory_name = settings.add_category('My category')\nsettings\n\n{'categories': [{'classes': None, 'name': 'test'}],\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}\n\n\nIn such case, it is important to retrieve the value returned by add_category, since that is the actual category name added.\n\nsettings.add_or_update_class(\n    category_name=category_name, class_name='MeanLinearCombinationCosineAndUniform', question_base_name='Mean of a random process',\n    init_parameters=dict(\n        uniform_low_range=[2, 8], uniform_high_range=[12, 30], mean_range=[-5, 5],\n        variance_range=[1, 10], cosine_frequency_over_pi=[1, 2, 3], t_range=[0, 30]\n    ),\n    n_instances=2, time=4\n)\nsettings\n\n{'categories': [{'classes': [{'init parameters': {'cosine_frequency_over_pi': [1,\n                                                                               2,\n                                                                               3],\n                                                  'mean_range': [-5, 5],\n                                                  't_range': [0, 30],\n                                                  'uniform_high_range': [12,\n                                                                         30],\n                                                  'uniform_low_range': [2, 8],\n                                                  'variance_range': [1, 10]},\n                              'name': 'MeanLinearCombinationCosineAndUniform',\n                              'number of instances': 2,\n                              'question base name': 'Mean of a random process',\n                              'time': 4}],\n                 'name': 'test'}],\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}\n\n\n\nsettings = Settings()\nsettings.add_category('My category')\nsettings.add_or_update_class(category_name='My category',class_name='A', question_base_name='question for class #1', n_instances=2, time=4)\nsettings.add_or_update_class(category_name='My category',class_name='B', question_base_name='question for class #2', n_instances=2, time=10)\nsettings.add_category(category_name='My category #1',base_category='Parent')\nsettings.add_or_update_class(\n    category_name=['Parent', 'Parent/My category #1'],class_name='C', question_base_name='question for class #2', n_instances=2, time=10)\n\n\nsettings\n\n{'categories': [{'classes': [{'name': 'A',\n                              'number of instances': 2,\n                              'question base name': 'question for class #1',\n                              'time': 4},\n                             {'name': 'B',\n                              'number of instances': 2,\n                              'question base name': 'question for class #2',\n                              'time': 10}],\n                 'name': 'My category'},\n                {'classes': [{'name': 'C',\n                              'number of instances': 2,\n                              'question base name': 'question for class #2',\n                              'time': 10}],\n                 'name': ['Parent', 'Parent/My category #1']}],\n 'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics'}\n\n\n\nsettings.locate('My category', 'B')\n\n{'name': 'B',\n 'question base name': 'question for class #2',\n 'number of instances': 2,\n 'time': 10}\n\n\n\nsettings.locate(category_name=['Parent', 'Parent/My category #1'])\n\n{'name': ['Parent', 'Parent/My category #1'],\n 'classes': [{'name': 'C',\n   'question base name': 'question for class #2',\n   'number of instances': 2,\n   'time': 10}]}\n\n\nIf the classes do exist\n\nclass A:\n    \n    name = 'A'\n\nclass B:\n    \n    name = 'B'\n\nclass C:\n    \n    name = 'C'\n\n\nclasses_container = settings.fake_module\nprint(classes_container.A.name)\nprint(classes_container.B.name)\n\nA\nB"
  },
  {
    "objectID": "input_file.html#composing-a-dictionary-with-the-yaml-settings",
    "href": "input_file.html#composing-a-dictionary-with-the-yaml-settings",
    "title": "Input file",
    "section": "Composing a dictionary with the YAML settings",
    "text": "Composing a dictionary with the YAML settings\n\nsource\n\ninitialize\n\n initialize (output_file:str, pictures_directory:str)\n\n\nsettings_dict = initialize(output_file='quiz.yaml', pictures_directory='quiz/pics')\n\n\nsource\n\n\nset_class_preamble\n\n set_class_preamble (settings:dict, category_name:str,\n                     base_category:Optional[str]=None,\n                     test_mode:bool=False)\n\n\nset_class_preamble(settings_dict, 'Test category')\nsettings_dict\n\n{'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics',\n 'categories': [{'name': 'Test category', 'classes': None}]}\n\n\n\nsource\n\n\nset_class_closing\n\n set_class_closing (settings:dict, n_instances:int,\n                    time:Optional[int]=None)\n\n\nset_class_closing(settings_dict, 2, 15)\nsettings_dict\n\n{'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics',\n 'categories': [{'name': 'Test category',\n   'classes': [{'number of instances': 2, 'time': 15}]}]}\n\n\n\nsource\n\n\nset_class\n\n set_class (settings:dict, class_name:str, question_base_name:str,\n            init_parameters:Optional[dict]=None,\n            parameters:Optional[List[dict]]=None,\n            n_instances:Optional[int]=None, time:Optional[int]=None)\n\n\nset_class(\n    settings_dict, class_name='MeanLinearCombinationCosineAndUniform', question_base_name='Mean of a random process',\n    init_parameters=dict(\n        uniform_low_range=[2, 8], uniform_high_range=[12, 30], mean_range=[-5, 5],\n        variance_range=[1, 10], cosine_frequency_over_pi=[1, 2, 3], t_range=[0, 30]\n    ), n_instances=2, time=4)\n\n\nsettings_dict\n\n{'output file': 'quiz.yaml',\n 'pictures base directory': 'quiz/pics',\n 'categories': [{'name': 'Test category',\n   'classes': [{'name': 'MeanLinearCombinationCosineAndUniform',\n     'question base name': 'Mean of a random process',\n     'init parameters': {'uniform_low_range': [2, 8],\n      'uniform_high_range': [12, 30],\n      'mean_range': [-5, 5],\n      'variance_range': [1, 10],\n      'cosine_frequency_over_pi': [1, 2, 3],\n      't_range': [0, 30]},\n     'number of instances': 2,\n     'time': 4}]}]}"
  },
  {
    "objectID": "input_file.html#writing",
    "href": "input_file.html#writing",
    "title": "Input file",
    "section": "Writing",
    "text": "Writing\nCode to write input files.\n\nHeader\nA function to write the header of the file. * file: name of the input file to be created\n\nsource\n\n\nwrite_header\n\n write_header (file:Union[str,pathlib.Path], output_file:str,\n               pictures_directory:str)\n\n\nwrite_header(test_file, output_file='quiz.yaml', pictures_directory='quiz/pics')\n\n\n\n\n\noutput file: quiz.yaml\npictures base directory: quiz/pics\ncategories:\n\n\n\n\n\n\nClass\n\nWriting the preamble\nA function to write the preamble for a class which includes the name of the category. Strictly speaking, it’s not necessary to create a new category every time a class is added, but this is more general and a category can show up many times in the input file. * file: name of the input file to be appended to * category_name: name of the category in which the class will be encompassed * base_category: a parent category for category_name (optional) * test_mode: if True, the last two parameters are overriden and the category is simply called test\nFor convenience, the final category_name (notice that it might get tweaked because of the other parameters) is returned.\n\nsource\n\n\n\nwrite_class_preamble\n\n write_class_preamble (file:Union[str,pathlib.Path], category_name:str,\n                       base_category:Optional[str]=None,\n                       test_mode:bool=False)\n\nWrites the preamble for a class which includes the name of the category. Strictly speaking, it’s not necessary to create a new category every time a class is added, but this is more general and a category can show up many times in the input file.\nParameters\n\nfile: str, Pathlib\nInput file to be appended to.\ncategory_name: str\nName of the category in which the class will be encompassed.\nbase_category: str, optional\nThe parent category for category_name.\ntest_mode: bool\nIf True the last two parameters are overriden and the category is simply called test.\n\nReturns\n\ncategory_name: str or list\nThe final name for the category (notice that it might get tweaked due to test_mode).\n\n\nwrite_class_preamble(test_file, 'Test category')\n\n'Test category'\n\n\n\n\n\n\noutput file: quiz.yaml\npictures base directory: quiz/pics\ncategories:\n  - name: Test category\n    classes:\n\n\n\n\nParameter base_category allows to create hierarchical categories\n\nwrite_header(test_file, output_file='quiz.yaml', pictures_directory='quiz/pics')\nwrite_class_preamble(test_file, 'Test category', base_category='base')\n\n['base', 'base/Test category']\n\n\n\n\n\noutput file: quiz.yaml\npictures base directory: quiz/pics\ncategories:\n  - name:\n      - base\n      - base/Test category\n    classes:\n\n\nIn test_mode\n\nwrite_header(test_file, output_file='quiz.yaml', pictures_directory='quiz/pics')\nwrite_class_preamble(test_file, 'Test category', base_category='base', test_mode=True)\n\n'test'\n\n\n\n\n\n\noutput file: quiz.yaml\npictures base directory: quiz/pics\ncategories:\n  - name: test\n    classes:\n\n\n\n\n\nWriting the closing\nA function to write the closing settings of a class. * file: name of the input file to be appended to * n_instances: number of questions of this class that will be created (the setup method of the class should be non-deterministic) * time: time in minutes (an integer) estimated necessary to solve the question\n\nsource\n\n\n\nwrite_class_closing\n\n write_class_closing (file:Union[str,pathlib.Path], n_instances:int,\n                      time:Optional[int]=None)\n\n\nwrite_class_closing(test_file, 2, 15)\n\n\n\n\n\noutput file: quiz.yaml\npictures base directory: quiz/pics\ncategories:\n  - name: test\n    classes:\n      - number of instances: 2\n        time: 15\n\n\n\n\n\n!rm {test_file}"
  },
  {
    "objectID": "input_file.html#categories",
    "href": "input_file.html#categories",
    "title": "Input file",
    "section": "Categories",
    "text": "Categories\n\nsource\n\nfunction_to_make_hierarchical_category_name\n\n function_to_make_hierarchical_category_name (base_category:str)\n\n\nf = function_to_make_hierarchical_category_name('2020 exam')\nf('Random')\n\n['2020 exam', '2020 exam/Random']"
  }
]